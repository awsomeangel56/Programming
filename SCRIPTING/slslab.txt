#!/bin/bash

# 1. Count users logged in
echo "Users logged in: $(who | wc -l)"

# 2. Print filenames with date of creation & serial number
ls -lt --time=creation | awk '{print NR, $6, $7, $8, $9}'

# 3. Count lines, words & characters
echo "Enter text (Ctrl+D to stop):"
lines=0; words=0; chars=0
while IFS= read -r line; do
    lines=$((lines + 1))
    words=$((words + $(echo "$line" | wc -w)))
    chars=$((chars + $(echo "$line" | wc -c)))
done
echo "Lines: $lines, Words: $words, Characters: $chars"

# 4. Print end of a glossary file in reverse order using array
file="glossary.txt"
mapfile -t lines < "$file"
for ((i=${#lines[@]}-1; i>=0; i--)); do echo "${lines[i]}"; done

# 5. Check user login every 30 seconds
read -p "Enter username: " user
while ! who | grep -q "$user"; do
    sleep 30
done
echo "$user has logged in!"

# 6. Prevent root access in another script
if [ "$EUID" -eq 0 ]; then
    echo "Root access not allowed. Exiting."
    exit 1
fi

# 7. File integrity check
mkdir -p hashes
for file in *; do
    if [ -f "$file" ]; then
        sha256sum "$file" > "hashes/$file.hash"
    fi
done
echo "Hashes stored. Run script again to check integrity."

# 8. Check user access from whitelist
whitelist=("user1" "user2")
current_user=$(whoami)
if [[ ! " ${whitelist[@]} " =~ " $current_user " ]]; then
    echo "Access denied for $current_user"
    exit 1
fi
echo "Access granted"

# 9. Deny execution right to another program
chmod -x target_program.sh
echo "Execution denied for target_program.sh"

# 10. Check if a number is palindrome
read -p "Enter a number: " num
rev_num=$(echo "$num" | rev)
if [ "$num" == "$rev_num" ]; then
    echo "Palindrome"
else
    echo "Not a palindrome"
fi




python


def sort(arr):
    for i in range(len(arr)):
        for j in range(i+1,len(arr)):
            if arr[i]>arr[j]:
                arr[i], arr[j]=arr[j], arr[i]
    return arr
arr=list(map(int,input("Enter the number to sort: ").split()))
sort(arr)
print(arr)

# 12. Factorial using recursion
def fact(n):
    if n==0:
        return 1
    else:
        return n*fact(n-1)
n=int(input("Enter a number to find factorial: "))
f=fact(n)
print("(",n,")!= ",f)


# 13. Password complexity check
def chkpass(p):
    rate=0
    l=len(p)
    if l>=8:
        rate+=1
    if l>=12:
        rate+=1
    if any(c.islower() for c in p):
        rate+=1
    if any(c.isupper() for c in p):
        rate+=1
    if any(c.isdigit() for c in p):
        rate+=1
    if any(c in "!@#$%^&*()_-+=" for c in p):
        rate+=1
    return rate
p=input("Enter password to test complexity: ")
rating=chkpass(p)
print("Rating is: ",rating,"/10")


# 14. Primality testing using Miller-Rabin
def miller_rabin(n, k=5):
    import random
    if n <= 1: return False
    if n <= 3: return True
    r, d = 0, n - 1
    while d % 2 == 0:
        r += 1
        d //= 2
    for _ in range(k):
        a = random.randint(2, n - 2)
        x = pow(a, d, n)
        if x == 1 or x == n - 1:
            continue
        for _ in range(r - 1):
            x = pow(x, 2, n)
            if x == n - 1:
                break
        else:
            return False
    return True

# 15. MD5 Hashing
import hashlib
s=input("Enetr a string: ")
hashval=hashlib.md5(s.encode()).hexdigest()
print(hashval)

# 16. Check for dark web presence
def check_dark_web(url):
    return url.endswith(".onion")

# 17. Pseudo random number generation
seed=12345
a=1664525
c=1013904223
m=2**32
def rand_num():
    global seed
    seed=(a*seed + c)%m
    return seed
for i in range(10):
    print(rand_num())

# 18. List images & PDFs in a directory
import os
dir_path=input("Enter path: ")
extensions=(".pdf",".jpeg",".gif")
if not os.path.exists(dir_path):
    print("Fuck off")
else:
    for i in os.listdir(dir_path):
        if i.lower().endswith(extensions):
            print(i)


